name "midas"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "midasTypes.hpp"

# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
using_library "frame_helper" # Image Frames. it depends in OpenCV

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
import_types_from "std"
import_types_from "base"

# Declare a new task context (i.e., a component)
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the midas namespace.
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #*************************
    #****Task Properties *****
    #*************************
    property "model_filename", "std::string"
        doc "Path to model filename"

    #*****************************
    #******* Input Ports *********
    #*****************************
    input_port('frame', ro_ptr('base::samples::frame::Frame')).
        doc 'RGB Image frame'

    stream_aligner do
        max_latency 0.5
        align_port "frame", 0
    end

    #******************************
    #******* Output Ports *********
    #******************************
    output_port('depthmap', ro_ptr('base::samples::frame::Frame')).
        doc 'Depth image frame'

    port_driven
end

